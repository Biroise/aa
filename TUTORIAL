
me@computer:~$ python
>>> from pylab import *
>>> import aa
>>> f = aa.open('file.nc')

If you made the changes suggested in INSTALL to your .bashrc, you can simply do this instead
me@computer:~$ aa file.nc
By convention, a 'aa.File' object will be assigne to variable 'f'

If the file contains a single variable, either method will assign the single variable to 'f' in the form of a 'aa.Variable' object (you can deactivate this behavior in the first lines of __init__.py)

If the file contains several variables, you can access via a dictionary attribute :
>>> f.variables
{'var1': <...>, 'var2': <...> ; ...}
>>> myVariable = f.variables['var2']
OR
>>> myVariable = f.var2

A variable is composed of :
	- a list of axes : myVariable.axes
	- a numpy array : myVariable.data
	- a dictionray of metadata : myVariable.metadata

To select a subset of your variable, you can :
	- call the variable object using physical quantities e.g. dates, degrees, pressures
		>>> t1 = aa.datetime(1970, 1, 1)
		>>> t2 = aa.datetime(2000, 1, 1)
		>>> lat1, lat2 = 60, 90
		>>> subsetVariable = myVariable(time = (t1, t2, 'co'), latitude = (lat1, lat2))
		'co' means closed-open : it will include 1970/01/01 but exclude 2000/01/01
		the default behaviour is 'cc' : in the example, 60Â°N and the North Pole will be included
		if the selected location does not fall on a grid point, your data will be interpolated
	- use the indices of the underlying data table
		>>> subsetVariable = myVariable[10, :40]
		assuming myVariable has time, latitude and longitude dimensions in that order
		this will select the tenth timestep of myVariable and and the forty first latitudes
		>>> lowResolution = myVariable[:, ::2, ::2]
		skip every second latitude, every second longitude

Averaging :
	>>> meanVariable = myVariable.mean(['time', 'latitude'])
	OR
	>>> meanVariable = myVariable.mean('xy')
	a 'mean' along the vertical is actually an integration
	you may want to supply the surface pressure to avoid including pressure underground levels :
	>>> myVariable.metadata['surfacePressure'] = surfacePressureVariable
	>>> myVariable.mean('z')

Yearly or monthly means :
	>>> yearlyMean = myVariable.yearly
	>>> monthlyMean = myVariable.monthly

Plots :
	>>> myVariable.plot
	OR, with a time dimension
	>>> myVariable.plot_trend()
	you may also want to access myVariable.slope, myVariable.intercept, myVariable.significance
	


